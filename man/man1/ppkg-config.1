.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PPKG-CONFIG 1"
.TH PPKG-CONFIG 1 "2018-10-15" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PkgConfig \- Pure\-Perl Core\-Only replacement for pkg\-config
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.ie n .SS "As a replacement for ""pkg\-config"""
.el .SS "As a replacement for \f(CWpkg\-config\fP"
.IX Subsection "As a replacement for pkg-config"
.Vb 1
\&    $ ppkg\-config \-\-libs \-\-cflags \-\-static gio\-2.0
\&
\&    #outputs (lines artificially broken up for readability):
\&    # \-I/usr/include/glib\-2.0 \-I/usr/lib/glib\-2.0/include
\&    # \-pthread \-lgio\-2.0 \-lz \-lresolv \-lgobject\-2.0
\&    # \-lgmodule\-2.0 \-ldl \-lgthread\-2.0 \-pthread \-lrt \-lglib\-2.0
.Ve
.PP
\&\f(CW\*(C`pkg\-config.pl\*(C'\fR can be used as an alias for \f(CW\*(C`ppkg\-config\*(C'\fR on platforms that
support it.  It can also be installed as \f(CW\*(C`pkg\-config\*(C'\fR though this is not
recommended if your system has a native \f(CW\*(C`pkg\-config\*(C'\fR.
.PP
Compare to:
    $ pkg-config \-\-libs \-\-cflags \-\-static gio\-2.0
.PP
.Vb 4
\&    #outputs ( "" ):
\&    # \-pthread \-I/usr/include/glib\-2.0 \-I/usr/lib/glib\-2.0/include
\&    # \-pthread \-lgio\-2.0 \-lz \-lresolv \-lgobject\-2.0 \-lgmodule\-2.0
\&    # \-ldl \-lgthread\-2.0 \-lrt \-lglib\-2.0
.Ve
.SS "From another Perl module"
.IX Subsection "From another Perl module"
.Vb 1
\&    use PkgConfig;
\&
\&    my $o = PkgConfig\->find(\*(Aqgio\*(Aq);
\&    if($o\->errmsg) {
\&        #handle error
\&    } else {
\&        my $prefix = $o\->get_var(\*(Aqprefix\*(Aq);
\&        my @cflags = $o\->get_cflags;
\&        my @ldflags = $o\->get_ldflags;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`PkgConfig\*(C'\fR provides a pure-perl, core-only replacement for the \f(CW\*(C`pkg\-config\*(C'\fR
utility.
.PP
This is not a description of the uses of \f(CW\*(C`pkg\-config\*(C'\fR but rather a description
of the differences between the C version and the Perl one.
.PP
While \f(CW\*(C`pkg\-config\*(C'\fR is a compiled binary linked with glib, the pure-perl version
has no such requirement, and will run wherever Perl ( >= 5.6 ) does.
.PP
The main supported options are the common \f(CW\*(C`\-\-libs\*(C'\fR, \f(CW\*(C`\-\-cflags\*(C'\fR,
\&\f(CW\*(C`\-\-static\*(C'\fR, \f(CW\*(C`\-\-exists\*(C'\fR and \f(CW\*(C`\-\-modversion\*(C'\fR.
.SS "\s-1SCRIPT OPTIONS\s0"
.IX Subsection "SCRIPT OPTIONS"
\fI\s-1USAGE\s0\fR
.IX Subsection "USAGE"
.PP
.Vb 1
\&    <packagename1 pkgname2..> [ \-\-options ]
.Ve
.PP
\fI\s-1ARGUMENTS\s0\fR
.IX Subsection "ARGUMENTS"
.PP
By default, a library name must be supplied unless one of \-\-version,
or \-\-real\-version is specified.
.PP
The output should normally be suitable for passing to your favorite compiler.
.PP
\-\-libs
.IX Subsection "--libs"
.PP
(Also) print linker flags. Dependencies are traverse in order. Top-level dependencies
will appear earlier in the command line than bottom-level dependencies.
.PP
\-\-libs\-only\-L
.IX Subsection "--libs-only-L"
.PP
Prints \-L/\-R part of \*(L"\-\-libs\*(R". It defines library search path but without libraries to link with.
.PP
\-\-libs\-only\-l
.IX Subsection "--libs-only-l"
.PP
Prints the \-l part of \*(L"\-\-libs\*(R".
.PP
\-\-libs\-only\-other
.IX Subsection "--libs-only-other"
.PP
Prints the part of \*(L"\-\-libs\*(R" not covered by \*(L"\-\-libs\-only\-L\*(R"
and \*(L"\-\-libs\-only\-l\*(R", such as \*(L"\-\-pthread\*(R".
.PP
\-\-list\-all
.IX Subsection "--list-all"
.PP
List all know packages.
.PP
\-\-cflags
.IX Subsection "--cflags"
.PP
(Also) print compiler and C preprocessor flags.
.PP
\-\-cflags\-only\-I
.IX Subsection "--cflags-only-I"
.PP
Prints the \-I part of \*(L"\-\-cflags\*(R"
.PP
\-\-cflags\-only\-other
.IX Subsection "--cflags-only-other"
.PP
Prints the parts of \*(L"\-\-cflags\*(R" not covered by \*(L"\-\-cflags\-only\-I\*(R".
.PP
\-\-modversion
.IX Subsection "--modversion"
.PP
Print the version of a given package.
.PP
\-\-static
.IX Subsection "--static"
.PP
Use extra dependencies and libraries if linking against a static version of the
requested library
.PP
\-\-exists
.IX Subsection "--exists"
.PP
Return success (0) if the package exists in the search path.
.PP
\-\-with\-path=PATH
.IX Subsection "--with-path=PATH"
.PP
Prepend \f(CW\*(C`PATH\*(C'\fR to the list of search paths containing \f(CW\*(C`.pc\*(C'\fR files.
.PP
This option can be specified multiple times with different paths, and they will
all be added.
.PP
\-\-env\-only
.IX Subsection "--env-only"
.PP
Using this option, \fBonly\fR paths specified in \f(CW\*(C`PKG_CONFIG_PATH\*(C'\fR are recognized
and any hard-coded defaults are ignored.
.PP
\-\-guess\-paths
.IX Subsection "--guess-paths"
.PP
Invoke \f(CW\*(C`gcc\*(C'\fR and \f(CW\*(C`ld\*(C'\fR to determine default linker and include paths. Default
paths will be excluded from explicit \-L and \-I flags.
.PP
\-\-define\-variable=VARIABLE=VALUE
.IX Subsection "--define-variable=VARIABLE=VALUE"
.PP
Define a variable, overriding any such variable definition in the .pc file, and
allowing your value to interpolate with subsequent uses.
.PP
\-\-variable=VARIABLE
.IX Subsection "--variable=VARIABLE"
.PP
This returns the value of a variable defined in a package's .pc file.
.PP
\-\-print\-variables
.IX Subsection "--print-variables"
.PP
Print all defined variables found in the .pc files.
.PP
\-\-version
.IX Subsection "--version"
.PP
The target version of \f(CW\*(C`pkg\-config\*(C'\fR emulated by this script
.PP
\-\-real\-version
.IX Subsection "--real-version"
.PP
The actual version of this script
.PP
\-\-debug
.IX Subsection "--debug"
.PP
Print debugging information
.PP
\-\-silence\-errors
.IX Subsection "--silence-errors"
.PP
Turn off errors. This is the default for non\-libs/cflag/modversion
arguments
.PP
\-\-print\-errors
.IX Subsection "--print-errors"
.PP
Print errors to \s-1STDERR\s0 and takes precedence over
\&\f(CW\*(C`\-\-silence\-errors\*(C'\fR
.PP
\-\-short\-errors
.IX Subsection "--short-errors"
.PP
Ignored, but recognized for compatibility.
.PP
\-\-errors\-to\-stdout
.IX Subsection "--errors-to-stdout"
.PP
Print errors to \s-1STDOUT\s0 and takes precedence over
\&\f(CW\*(C`\-\-print\-errors\*(C'\fR
.PP
\fI\s-1ENVIRONMENT\s0\fR
.IX Subsection "ENVIRONMENT"
.PP
the \f(CW\*(C`PKG_CONFIG_PATH\*(C'\fR and \f(CW\*(C`PKG_CONFIG_LIBDIR\*(C'\fR variables are honored and used
as a colon-delimited (semicolon-delimited on Windows) list of directories with
contain \f(CW\*(C`.pc\*(C'\fR files.
.PP
Other environment variables recongized by both \f(CW\*(C`pkg\-config\*(C'\fR and PkgConfig
include:
.IP "\s-1PKG_CONFIG_ALLOW_SYSTEM_CFLAGS\s0" 4
.IX Item "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS"
.PD 0
.IP "\s-1PKG_CONFIG_ALLOW_SYSTEM_LIBS\s0" 4
.IX Item "PKG_CONFIG_ALLOW_SYSTEM_LIBS"
.PD
.PP
If Win32API::Registry is installed, on Windows (but not Cygwin) PkgConfig
will also consult these registry keys.  The names are ignored, but the values
are paths containing \f(CW\*(C`.pc\*(C'\fR files.
.IP "HKEY_CURRENT_USER\eSoftware\epkgconfig\ePKG_CONFIG_PATH" 4
.IX Item "HKEY_CURRENT_USERSoftwarepkgconfigPKG_CONFIG_PATH"
.PD 0
.IP "HKEY_LOCAL_MACHINE\eSoftware\epkgconfig\ePKG_CONFIG_PATH" 4
.IX Item "HKEY_LOCAL_MACHINESoftwarepkgconfigPKG_CONFIG_PATH"
.PD
.PP
Registry support should be considered somewhat experimental, subject to change
in the future, though not without good reason.  The rationale for this caveat
is that this feature is documented in several places, but I have yet to find
a working version that implements this feature.
.SS "\s-1MODULE OPTIONS\s0"
.IX Subsection "MODULE OPTIONS"
\fIPkgConfig\->find\fR
.IX Subsection "PkgConfig->find"
.PP
.Vb 1
\&    my $result = PkgConfig\->find($library, %options);
.Ve
.PP
Find a library and return a result object.
\&\f(CW$library\fR can be either a single name of a library, or a reference to an
array of library names
.PP
The options are in the form of hash keys and values, and the following are
recognized:
.ie n .IP """search_path""" 4
.el .IP "\f(CWsearch_path\fR" 4
.IX Item "search_path"
.PD 0
.ie n .IP """search_path_override""" 4
.el .IP "\f(CWsearch_path_override\fR" 4
.IX Item "search_path_override"
.PD
Prepend search paths in addition to the paths specified in \f(CW$ENV{PKG_CONFIG_PATH}\fR
The value is an array reference.
.Sp
the \f(CW\*(C`_override\*(C'\fR variant ignores defaults (like \f(CW\*(C`PKG_CONFIG_PATH\*(C'\fR).
.ie n .IP """file_path""" 4
.el .IP "\f(CWfile_path\fR" 4
.IX Item "file_path"
Specifies the full path of the of the .pc file that you wish to load.  It does
not need to be in the search path (although any dependencies will need to be).
Useful if you know the full path of the exact .pc file that you want.
.ie n .IP """exclude_cflags""" 4
.el .IP "\f(CWexclude_cflags\fR" 4
.IX Item "exclude_cflags"
.PD 0
.ie n .IP """exclude_ldflags""" 4
.el .IP "\f(CWexclude_ldflags\fR" 4
.IX Item "exclude_ldflags"
.ie n .IP """exclude_cflags_override""" 4
.el .IP "\f(CWexclude_cflags_override\fR" 4
.IX Item "exclude_cflags_override"
.ie n .IP """exclude_ldflags_override""" 4
.el .IP "\f(CWexclude_ldflags_override\fR" 4
.IX Item "exclude_ldflags_override"
.PD
Some \f(CW\*(C`.pc\*(C'\fR files specify default compiler and linker search paths, e.g.
\&\f(CW\*(C`\-I/usr/include \-L/usr/lib\*(C'\fR. Specifying them on the command line can be
problematic as it drastically changes the search order.
.Sp
The above options will either append or replace the options which are excluded
and filtered.
.Sp
The default excluded linker and compiler options can be obtained via
\&\f(CW@PkgConfig::DEFAULT_EXCLUDE_LFLAGS\fR and \f(CW@PkgConfig::DEFAULT_EXCLUDE_CFLAGS\fR,
respectively.
.ie n .IP """static""" 4
.el .IP "\f(CWstatic\fR" 4
.IX Item "static"
Also specify static libraries.
.ie n .IP """no_recurse""" 4
.el .IP "\f(CWno_recurse\fR" 4
.IX Item "no_recurse"
Do not recurse dependencies. This is useful for just doing version checks.
.ie n .IP """VARS""" 4
.el .IP "\f(CWVARS\fR" 4
.IX Item "VARS"
Define a hashref of variables to override any variable definitions within
the .pc files. This is equivalent to the \f(CW\*(C`\-\-define\-variable\*(C'\fR command-line
option.
.PP
A \f(CW\*(C`PkgConfig\*(C'\fR object is returned and may be queried about the results:
.PP
\fI\f(CI$o\fI\->errmsg\fR
.IX Subsection "$o->errmsg"
.PP
An error message, if any. This is a string and indicates an error.
.PP
\fI\f(CI$o\fI\->pkg_exists\fR
.IX Subsection "$o->pkg_exists"
.PP
Boolean value, true if the package exists.
.PP
\fI\f(CI$o\fI\->pkg_version\fR
.IX Subsection "$o->pkg_version"
.PP
The version of the package
.PP
\fI\f(CI$o\fI\->get_cflags\fR
.IX Subsection "$o->get_cflags"
.PP
\fI\f(CI$o\fI\->get_ldflags\fR
.IX Subsection "$o->get_ldflags"
.PP
Returns compiler and linker flags, respectively.
.PP
In list context, these methods return a list with each argument split on
unescaped spaces.
.PP
In list context returns a list of compiler and linker flags, respectively.
.PP
In scalar context returns a string of compiler and linker flags with spaces
and quotes escaped correctly.
.PP
\fI\f(CI$o\fI\->get_var($name)\fR
.IX Subsection "$o->get_var($name)"
.PP
Get the variable with the given name.
.PP
\fIPkgConfig\->Guess\fR
.IX Subsection "PkgConfig->Guess"
.PP
This is a class method, and will replace the hard-coded default linker and include
paths with those discovered by invoking \fBld\fR\|(1) and \fBcpp\fR\|(1).
.PP
Currently this only works with GCC-supplied \f(CW\*(C`ld\*(C'\fR and \s-1GNU\s0 \f(CW\*(C`ld\*(C'\fR.
.SS "\s-1INSTALL\s0"
.IX Subsection "INSTALL"
The \f(CW\*(C`Makefile.PL\*(C'\fR that comes with \f(CW\*(C`PkgConfig\*(C'\fR can take one or more \f(CW\*(C`\-\-script\*(C'\fR
options to change of the name of the script or scripts that are installed.
.IP "\-\-script ppkg-config" 4
.IX Item "--script ppkg-config"
This is the default and works on all platforms
.IP "\-\-script pkg\-config.pl" 4
.IX Item "--script pkg-config.pl"
This is installed by default on all platforms except for Windows, where the .pl
may confuse the shell and cause the script to be opened in a text editor.
.IP "\-\-script pkg-config" 4
.IX Item "--script pkg-config"
This is the default name of the real \f(CW\*(C`pkg\-config\*(C'\fR and so you have to specifically
enable it if you want it.
.IP "\-\-script none" 4
.IX Item "--script none"
Don't install any scripts.
.PP
Example, install all script names:
.PP
.Vb 1
\& % perl Makefile.PL \-\-script ppkg\-config \-\-script pkg\-config.pl \-\-script pkg\-config
.Ve
.PP
Example, don't install any scripts:
.PP
.Vb 1
\& % perl Makefile.PL \-\-script none
.Ve
.PP
You can also set the environment variable \s-1PERL_PKG_CONFIG_SCRIPTS\s0 to the
desired \-\-script value (separating each script name with a comma \f(CW\*(C`,\*(C'\fR) to
ensure that upgrades of PkgConfig do the same.
.SS "\s-1CAVEATS\s0"
.IX Subsection "CAVEATS"
On Strawberry Perl \f(CW\*(C`ppkg\-config\*(C'\fR acts like Strawberry is the system.  
This means that
.IP "\(bu" 4
The .pc files that are bundled with Strawberry are searched by default.
.IP "\(bu" 4
The Strawberry include and lib directories are used to compute the 
exclusion lists.
.PP
As of Strawberry 5.20.0.1 PkgConfig is bundled with Strawberry and 
\&\f(CW\*(C`pkg\-config\*(C'\fR is installed by default (in addition to \f(CW\*(C`ppkg\-config\*(C'\fR,
though the \f(CW\*(C`ppkg\-config\*(C'\fR alias is \s-1NOT\s0 bundled with Strawberry itself).
.PP
For details on how to patch the .pc files bundled with older Strawberries,
see the \f(CW\*(C`README.win32\*(C'\fR that comes with this Distribution.
.SS "\s-1BUGS\s0"
.IX Subsection "BUGS"
The order of the flags is not exactly matching to that of \f(CW\*(C`pkg\-config\*(C'\fR. From my
own observation, it seems this module does a better job, but I might be wrong.
.PP
Unlike \f(CW\*(C`pkg\-config\*(C'\fR, the scripts \f(CW\*(C`\-\-exists\*(C'\fR function will return nonzero if
a package \fBor\fR any of its dependencies are missing. This differs from the
behavior of \f(CW\*(C`pkg\-config\*(C'\fR which will just check for the definition of the
package itself (without dependencies).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "pkg-config <http://www.freedesktop.org/wiki/Software/pkg-config>" 4
.IX Item "pkg-config <http://www.freedesktop.org/wiki/Software/pkg-config>"
The original C implementation
.IP "pkgconf <https://github.com/pkgconf/pkgconf>" 4
.IX Item "pkgconf <https://github.com/pkgconf/pkgconf>"
An alternative C implementation
.IP "PkgConfig::LibPkgConf" 4
.IX Item "PkgConfig::LibPkgConf"
Perl bindings for \f(CW\*(C`libpkgconf\*(C'\fR, the same library that \f(CW\*(C`pkgconf\*(C'\fR is built on.
.IP "ExtUtils::PkgConfig" 4
.IX Item "ExtUtils::PkgConfig"
A wrapper around the \f(CW\*(C`pkg\-config\*(C'\fR binary that can be used in your \f(CW\*(C`Makefile.PL\*(C'\fR
or \f(CW\*(C`Build.PL\*(C'\fR.
.IP "<http://www.openbsd.org/cgi\-bin/cvsweb/src/usr.bin/pkg\-config/>" 4
.IX Item "<http://www.openbsd.org/cgi-bin/cvsweb/src/usr.bin/pkg-config/>"
Another perl implementation of pkg-config
.IP "pkg-config <https://github.com/ruby-gnome2/pkg-config>" 4
.IX Item "pkg-config <https://github.com/ruby-gnome2/pkg-config>"
Pure Ruby implementation.
.IP "pykg-config <https://pypi.python.org/pypi/pykg-config/1.2.0>" 4
.IX Item "pykg-config <https://pypi.python.org/pypi/pykg-config/1.2.0>"
A Python implementation.
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Original Author: M. Nunberg" 4
.IX Item "Original Author: M. Nunberg"
.PD 0
.IP "Current maintainer: Graham Ollis <plicease@cpan.org>" 4
.IX Item "Current maintainer: Graham Ollis <plicease@cpan.org>"
.PD
.PP
Other contributors include:
.IP "Vladimir Timofeev (vovkasm)" 4
.IX Item "Vladimir Timofeev (vovkasm)"
.PD 0
.IP "kmx" 4
.IX Item "kmx"
.IP "Sanel Zukan" 4
.IX Item "Sanel Zukan"
.IP "Breno G. de Oliveira (garu)" 4
.IX Item "Breno G. de Oliveira (garu)"
.IP "Gregor Herrmann" 4
.IX Item "Gregor Herrmann"
.IP "Ilya Pavlov (\s-1ILUX,\s0 Ilya33)" 4
.IX Item "Ilya Pavlov (ILUX, Ilya33)"
.IP "Shawn Laffan (\s-1SLAFFAN,\s0 shawnlaffan)" 4
.IX Item "Shawn Laffan (SLAFFAN, shawnlaffan)"
.IP "Ari Jolma (\s-1AJOLMA\s0)" 4
.IX Item "Ari Jolma (AJOLMA)"
.PD
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2012 M. Nunberg
.PP
This is free software; you can redistribute it and/or modify it under the same
terms as the Perl 5 programming language system itself.
