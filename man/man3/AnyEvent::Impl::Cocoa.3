.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "AnyEvent::Impl::Cocoa 3"
.TH AnyEvent::Impl::Cocoa 3 "2012-04-08" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AnyEvent::Impl::Cocoa \- AnyEvent adaptor for Cocoa::EventLoop
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use AnyEvent;
\&    use Cocoa::EventLoop;
\&    
\&    # do something
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides NSRunLoop support to AnyEvent.
.PP
NSRunLoop is an event loop for Cocoa applications, wrapped by
Cocoa::EventLoop. By using this module, you can use Cocoa based \s-1API\s0 in
your AnyEvent application, or AnyEvent within Cocoa applications.
.PP
It does not support blocking waits.
.SH "BUGS"
.IX Header "BUGS"
Right now, Cocoa::EventLoop (and this module) are in an early
development phase and has some shortcomings and likely bugs.
.PP
For example, there seems to be no way to just handle a single event
with Cocoa (is there nothing they can implement properly?), so this
module currently wakes up at least ten times a second when waiting for
events. Also, events caused by timers might get delayed by up to 0.1
seconds.
.SH "AUTHORS"
.IX Header "AUTHORS"
Daisuke Murase <typester@cpan.org>, Marc Lehmann <schmorp@schmorp.de>.
.SH "COPYRIGHTS"
.IX Header "COPYRIGHTS"
.Vb 2
\&   Copyright (c) 2009 by KAYAC Inc.
\&   Copyright (c) 2010,2011 by Marc Lehmann <schmorp@schmorp.de>
.Ve
