.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "ActiveState::YAML 3"
.TH ActiveState::YAML 3 "2017-06-23" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ActiveState::YAML \- YAML API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use ActiveState::YAML qw(yaml_load_file);
\& my $foo = yaml_load_file("foo.yml");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is currently just a frontend for the \f(CW\*(C`YAML\*(C'\fR module from \s-1CPAN,\s0
but its internals will change as \s-1YAML\s0 for perl evolves.  Currently
\&\s-1YAML\s0 for perl appears to be in a state of flux and this module provide
a stable interface for ActiveState modules that needs to deal with
\&\s-1YAML.\s0
.PP
The following functions are provided:
.ie n .IP "yaml_load_file( $filename )" 4
.el .IP "yaml_load_file( \f(CW$filename\fR )" 4
.IX Item "yaml_load_file( $filename )"
This will parse \s-1YAML\s0 from the given file and return the
corresponding perl data structure.  The function will croak on errors.
.ie n .IP "yaml_dump_file( $filename, @data )" 4
.el .IP "yaml_dump_file( \f(CW$filename\fR, \f(CW@data\fR )" 4
.IX Item "yaml_dump_file( $filename, @data )"
This will save the \f(CW@data\fR as \s-1YAML\s0 to the given file.  The function will
croak on errors.
.ie n .IP "yaml_load( $string )" 4
.el .IP "yaml_load( \f(CW$string\fR )" 4
.IX Item "yaml_load( $string )"
This will parse a string of \s-1YAML\s0 and return the corresponding perl
data structure.  The function will croak on errors.
.ie n .IP "yaml_dump( @data )" 4
.el .IP "yaml_dump( \f(CW@data\fR )" 4
.IX Item "yaml_dump( @data )"
This will return \f(CW@data\fR represented as string of \s-1YAML.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1YAML\s0
