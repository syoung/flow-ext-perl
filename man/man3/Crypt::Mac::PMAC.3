.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::Mac::PMAC 3"
.TH Crypt::Mac::PMAC 3 "2020-03-10" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::Mac::PMAC \- Message authentication code PMAC
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   ### Functional interface:
\&   use Crypt::Mac::PMAC qw( pmac pmac_hex );
\&
\&   # calculate MAC from string/buffer
\&   $pmac_raw  = pmac($cipher_name, $key, \*(Aqdata buffer\*(Aq);
\&   $pmac_hex  = pmac_hex($cipher_name, $key, \*(Aqdata buffer\*(Aq);
\&   $pmac_b64  = pmac_b64($cipher_name, $key, \*(Aqdata buffer\*(Aq);
\&   $pmac_b64u = pmac_b64u($cipher_name, $key, \*(Aqdata buffer\*(Aq);
\&
\&   ### OO interface:
\&   use Crypt::Mac::PMAC;
\&
\&   $d = Crypt::Mac::PMAC\->new($cipher_name, $key);
\&   $d\->add(\*(Aqany data\*(Aq);
\&   $d\->addfile(\*(Aqfilename.dat\*(Aq);
\&   $d\->addfile(*FILEHANDLE);
\&   $result_raw  = $d\->mac;     # raw bytes
\&   $result_hex  = $d\->hexmac;  # hexadecimal form
\&   $result_b64  = $d\->b64mac;  # Base64 form
\&   $result_b64u = $d\->b64umac; # Base64 URL Safe form
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides an interface to the \s-1PMAC\s0 message authentication code (\s-1MAC\s0) algorithm.
.SH "EXPORT"
.IX Header "EXPORT"
Nothing is exported by default.
.PP
You can export selected functions:
.PP
.Vb 1
\&  use Crypt::Mac::PMAC qw(pmac pmac_hex );
.Ve
.PP
Or all of them at once:
.PP
.Vb 1
\&  use Crypt::Mac::PMAC \*(Aq:all\*(Aq;
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "pmac"
.IX Subsection "pmac"
Logically joins all arguments into a single string, and returns its \s-1PMAC\s0 message authentication code encoded as a binary string.
.PP
.Vb 3
\& $pmac_raw = pmac($cipher_name, $key, \*(Aqdata buffer\*(Aq);
\& #or
\& $pmac_raw = pmac($cipher_name, $key, \*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS "pmac_hex"
.IX Subsection "pmac_hex"
Logically joins all arguments into a single string, and returns its \s-1PMAC\s0 message authentication code encoded as a hexadecimal string.
.PP
.Vb 3
\& $pmac_hex = pmac_hex($cipher_name, $key, \*(Aqdata buffer\*(Aq);
\& #or
\& $pmac_hex = pmac_hex($cipher_name, $key, \*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS "pmac_b64"
.IX Subsection "pmac_b64"
Logically joins all arguments into a single string, and returns its \s-1PMAC\s0 message authentication code encoded as a Base64 string.
.PP
.Vb 3
\& $pmac_b64 = pmac_b64($cipher_name, $key, \*(Aqdata buffer\*(Aq);
\& #or
\& $pmac_b64 = pmac_b64($cipher_name, $key, \*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS "pmac_b64u"
.IX Subsection "pmac_b64u"
Logically joins all arguments into a single string, and returns its \s-1PMAC\s0 message authentication code encoded as a Base64 \s-1URL\s0 Safe string (see \s-1RFC 4648\s0 section 5).
.PP
.Vb 3
\& $pmac_b64url = pmac_b64u($cipher_name, $key, \*(Aqdata buffer\*(Aq);
\& #or
\& $pmac_b64url = pmac_b64u($cipher_name, $key, \*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\& $d = Crypt::Mac::PMAC\->new($cipher_name, $key);
.Ve
.SS "clone"
.IX Subsection "clone"
.Vb 1
\& $d\->clone();
.Ve
.SS "reset"
.IX Subsection "reset"
.Vb 1
\& $d\->reset();
.Ve
.SS "add"
.IX Subsection "add"
.Vb 3
\& $d\->add(\*(Aqany data\*(Aq);
\& #or
\& $d\->add(\*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS "addfile"
.IX Subsection "addfile"
.Vb 3
\& $d\->addfile(\*(Aqfilename.dat\*(Aq);
\& #or
\& $d\->addfile(*FILEHANDLE);
.Ve
.SS "mac"
.IX Subsection "mac"
.Vb 1
\& $result_raw = $d\->mac();
.Ve
.SS "hexmac"
.IX Subsection "hexmac"
.Vb 1
\& $result_hex = $d\->hexmac();
.Ve
.SS "b64mac"
.IX Subsection "b64mac"
.Vb 1
\& $result_b64 = $d\->b64mac();
.Ve
.SS "b64umac"
.IX Subsection "b64umac"
.Vb 1
\& $result_b64url = $d\->b64umac();
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
CryptX
.IP "\(bu" 4
<https://en.wikipedia.org/wiki/PMAC_%28cryptography%29>
