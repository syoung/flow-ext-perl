.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::PRNG::Fortuna 3"
.TH Crypt::PRNG::Fortuna 3 "2020-03-10" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::PRNG::Fortuna \- Cryptographically secure PRNG based on Fortuna algorithm
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   ### Functional interface:
\&   use Crypt::PRNG::Fortuna qw(random_bytes random_bytes_hex random_bytes_b64 random_bytes_b64u
\&                               random_string random_string_from rand irand);
\&
\&   $octets = random_bytes(45);
\&   $hex_string = random_bytes_hex(45);
\&   $base64_string = random_bytes_b64(45);
\&   $base64url_string = random_bytes_b64u(45);
\&   $alphanumeric_string = random_string(30);
\&   $string = random_string_from(\*(AqACGT\*(Aq, 64);
\&   $floating_point_number_0_to_1 = rand;
\&   $floating_point_number_0_to_88 = rand(88);
\&   $unsigned_32bit_int = irand;
\&
\&   ### OO interface:
\&   use Crypt::PRNG::Fortuna;
\&
\&   $prng = Crypt::PRNG::Fortuna\->new;
\&   #or
\&   $prng = Crypt::PRNG::Fortuna\->new("some data used for seeding PRNG");
\&
\&   $octets = $prng\->bytes(45);
\&   $hex_string = $prng\->bytes_hex(45);
\&   $base64_string = $prng\->bytes_b64(45);
\&   $base64url_string = $prng\->bytes_b64u(45);
\&   $alphanumeric_string = $prng\->string(30);
\&   $string = $prng\->string_from(\*(AqACGT\*(Aq, 64);
\&   $floating_point_number_0_to_1 = rand;
\&   $floating_point_number_0_to_88 = rand(88);
\&   $unsigned_32bit_int = irand;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides an interface to the Fortuna based pseudo random number generator
.PP
All methods and functions are the same as for Crypt::PRNG.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "random_bytes"
.IX Subsection "random_bytes"
See \*(L"random_bytes\*(R" in Crypt::PRNG.
.SS "random_bytes_hex"
.IX Subsection "random_bytes_hex"
See \*(L"random_bytes_hex\*(R" in Crypt::PRNG.
.SS "random_bytes_b64"
.IX Subsection "random_bytes_b64"
See \*(L"random_bytes_b64\*(R" in Crypt::PRNG.
.SS "random_bytes_b64u"
.IX Subsection "random_bytes_b64u"
See \*(L"random_bytes_b64u\*(R" in Crypt::PRNG.
.SS "random_string"
.IX Subsection "random_string"
See \*(L"random_string\*(R" in Crypt::PRNG.
.SS "random_string_from"
.IX Subsection "random_string_from"
See \*(L"random_string_from\*(R" in Crypt::PRNG.
.SS "rand"
.IX Subsection "rand"
See \*(L"rand\*(R" in Crypt::PRNG.
.SS "irand"
.IX Subsection "irand"
See \*(L"irand\*(R" in Crypt::PRNG.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
See \*(L"new\*(R" in Crypt::PRNG.
.SS "bytes"
.IX Subsection "bytes"
See \*(L"bytes\*(R" in Crypt::PRNG.
.SS "bytes_hex"
.IX Subsection "bytes_hex"
See \*(L"bytes_hex\*(R" in Crypt::PRNG.
.SS "bytes_b64"
.IX Subsection "bytes_b64"
See \*(L"bytes_b64\*(R" in Crypt::PRNG.
.SS "bytes_b64u"
.IX Subsection "bytes_b64u"
See \*(L"bytes_b64u\*(R" in Crypt::PRNG.
.SS "string"
.IX Subsection "string"
See \*(L"string\*(R" in Crypt::PRNG.
.SS "string_from"
.IX Subsection "string_from"
See \*(L"string_from\*(R" in Crypt::PRNG.
.SS "double"
.IX Subsection "double"
See \*(L"double\*(R" in Crypt::PRNG.
.SS "int32"
.IX Subsection "int32"
See \*(L"int32\*(R" in Crypt::PRNG.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Crypt::PRNG
.IP "\(bu" 4
<https://en.wikipedia.org/wiki/Fortuna_%28PRNG%29>
