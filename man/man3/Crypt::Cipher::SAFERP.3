.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::Cipher::SAFERP 3"
.TH Crypt::Cipher::SAFERP 3 "2020-03-10" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::Cipher::SAFERP \- Symmetric cipher SAFER+, key size: 128/192/256 bits (Crypt::CBC compliant)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  ### example 1
\&  use Crypt::Mode::CBC;
\&
\&  my $key = \*(Aq...\*(Aq; # length has to be valid key size for this cipher
\&  my $iv = \*(Aq...\*(Aq;  # 16 bytes
\&  my $cbc = Crypt::Mode::CBC\->new(\*(AqSAFERP\*(Aq);
\&  my $ciphertext = $cbc\->encrypt("secret data", $key, $iv);
\&
\&  ### example 2 (slower)
\&  use Crypt::CBC;
\&  use Crypt::Cipher::SAFERP;
\&
\&  my $key = \*(Aq...\*(Aq; # length has to be valid key size for this cipher
\&  my $iv = \*(Aq...\*(Aq;  # 16 bytes
\&  my $cbc = Crypt::CBC\->new( \-cipher=>\*(AqCipher::SAFERP\*(Aq, \-key=>$key, \-iv=>$iv );
\&  my $ciphertext = $cbc\->encrypt("secret data");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements the \s-1SAFERP\s0 cipher. Provided interface is compliant with Crypt::CBC module.
.PP
\&\fB\s-1BEWARE:\s0\fR This module implements just elementary \*(L"one\-block\-(en|de)cryption\*(R" operation \- if you want to
encrypt/decrypt generic data you have to use some of the cipher block modes \- check for example
Crypt::Mode::CBC, Crypt::Mode::CTR or Crypt::CBC (which will be slower).
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 3
\& $c = Crypt::Cipher::SAFERP\->new($key);
\& #or
\& $c = Crypt::Cipher::SAFERP\->new($key, $rounds);
.Ve
.SS "encrypt"
.IX Subsection "encrypt"
.Vb 1
\& $ciphertext = $c\->encrypt($plaintext);
.Ve
.SS "decrypt"
.IX Subsection "decrypt"
.Vb 1
\& $plaintext = $c\->decrypt($ciphertext);
.Ve
.SS "keysize"
.IX Subsection "keysize"
.Vb 5
\&  $c\->keysize;
\&  #or
\&  Crypt::Cipher::SAFERP\->keysize;
\&  #or
\&  Crypt::Cipher::SAFERP::keysize;
.Ve
.SS "blocksize"
.IX Subsection "blocksize"
.Vb 5
\&  $c\->blocksize;
\&  #or
\&  Crypt::Cipher::SAFERP\->blocksize;
\&  #or
\&  Crypt::Cipher::SAFERP::blocksize;
.Ve
.SS "max_keysize"
.IX Subsection "max_keysize"
.Vb 5
\&  $c\->max_keysize;
\&  #or
\&  Crypt::Cipher::SAFERP\->max_keysize;
\&  #or
\&  Crypt::Cipher::SAFERP::max_keysize;
.Ve
.SS "min_keysize"
.IX Subsection "min_keysize"
.Vb 5
\&  $c\->min_keysize;
\&  #or
\&  Crypt::Cipher::SAFERP\->min_keysize;
\&  #or
\&  Crypt::Cipher::SAFERP::min_keysize;
.Ve
.SS "default_rounds"
.IX Subsection "default_rounds"
.Vb 5
\&  $c\->default_rounds;
\&  #or
\&  Crypt::Cipher::SAFERP\->default_rounds;
\&  #or
\&  Crypt::Cipher::SAFERP::default_rounds;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
CryptX, Crypt::Cipher
.IP "\(bu" 4
<https://en.wikipedia.org/wiki/SAFER>
