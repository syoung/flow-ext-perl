.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "AnyEvent::RabbitMQ 3"
.TH AnyEvent::RabbitMQ 3 "2020-05-30" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AnyEvent::RabbitMQ \- An asynchronous and multi channel Perl AMQP client.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use AnyEvent::RabbitMQ;
\&
\&  my $cv = AnyEvent\->condvar;
\&
\&  my $ar = AnyEvent::RabbitMQ\->new\->load_xml_spec()\->connect(
\&      host       => \*(Aqlocalhost\*(Aq,
\&      port       => 5672,
\&      user       => \*(Aqguest\*(Aq,
\&      pass       => \*(Aqguest\*(Aq,
\&      vhost      => \*(Aq/\*(Aq,
\&      timeout    => 1,
\&      tls        => 0, # Or 1 if you\*(Aqd like SSL
\&      tls_ctx    => $anyevent_tls # or a hash of AnyEvent::TLS options.
\&      tune       => { heartbeat => 30, channel_max => $whatever, frame_max = $whatever },
\&      on_success => sub {
\&          my $ar = shift;
\&          $ar\->open_channel(
\&              on_success => sub {
\&                  my $channel = shift;
\&                  $channel\->declare_exchange(
\&                      exchange   => \*(Aqtest_exchange\*(Aq,
\&                      on_success => sub {
\&                          $cv\->send(\*(AqDeclared exchange\*(Aq);
\&                      },
\&                      on_failure => $cv,
\&                  );
\&              },
\&              on_failure => $cv,
\&              on_close   => sub {
\&                  my $method_frame = shift\->method_frame;
\&                  die $method_frame\->reply_code, $method_frame\->reply_text;
\&              },
\&          );
\&      },
\&      on_failure => $cv,
\&      on_read_failure => sub { die @_ },
\&      on_return  => sub {
\&          my $frame = shift;
\&          die "Unable to deliver ", Dumper($frame);
\&      },
\&      on_close   => sub {
\&          my $why = shift;
\&          if (ref($why)) {
\&              my $method_frame = $why\->method_frame;
\&              die $method_frame\->reply_code, ": ", $method_frame\->reply_text;
\&          }
\&          else {
\&              die $why;
\&          }
\&      },
\&  );
\&
\&  print $cv\->recv, "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
AnyEvent::RabbitMQ is an \s-1AMQP\s0(Advanced Message Queuing Protocol) client library, that is intended to allow you to interact with AMQP-compliant message brokers/servers such as RabbitMQ in an asynchronous fashion.
.PP
You can use AnyEvent::RabbitMQ to \-
.PP
.Vb 5
\&  * Declare and delete exchanges
\&  * Declare, delete, bind and unbind queues
\&  * Set QoS and confirm mode
\&  * Publish, consume, get, ack, recover and reject messages
\&  * Select, commit and rollback transactions
.Ve
.PP
Most of these actions can be done through AnyEvent::RabbitMQ::Channel.
Please see the documentation there for more details.
.PP
AnyEvent::RabbitMQ is known to work with RabbitMQ versions 2.5.1 and versions 0\-8 and 0\-9\-1 of the \s-1AMQP\s0 specification.
.PP
This client is the non-blocking version, for a blocking version with a similar \s-1API,\s0 see Net::RabbitFoot.
.SH "AUTHOR"
.IX Header "AUTHOR"
Masahito Ikuta <cooldaemon@gmail.com>
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Currently maintained by \f(CW\*(C`<bobtfish@bobtfish.net>\*(C'\fR due to the original
author being missing in action.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2010, the above named author(s).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
