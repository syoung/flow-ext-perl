.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::Mode::CFB 3"
.TH Crypt::Mode::CFB 3 "2020-03-10" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::Mode::CFB \- Block cipher mode CFB [Cipher feedback]
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   use Crypt::Mode::CFB;
\&   my $m = Crypt::Mode::CFB\->new(\*(AqAES\*(Aq);
\&
\&   #(en|de)crypt at once
\&   my $ciphertext = $m\->encrypt($plaintext, $key, $iv);
\&   my $plaintext = $m\->decrypt($ciphertext, $key, $iv);
\&
\&   #encrypt more chunks
\&   $m\->start_encrypt($key, $iv);
\&   my $ciphertext = $m\->add(\*(Aqsome data\*(Aq);
\&   $ciphertext .= $m\->add(\*(Aqmore data\*(Aq);
\&
\&   #decrypt more chunks
\&   $m\->start_decrypt($key, $iv);
\&   my $plaintext = $m\->add($some_ciphertext);
\&   $plaintext .= $m\->add($more_ciphertext);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements \s-1CFB\s0 cipher mode. \fB\s-1NOTE:\s0\fR it works only with ciphers from CryptX (Crypt::Cipher::NNNN).
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 3
\& my $m = Crypt::Mode::CFB\->new($name);
\& #or
\& my $m = Crypt::Mode::CFB\->new($name, $cipher_rounds);
\&
\& # $name ............ one of \*(AqAES\*(Aq, \*(AqAnubis\*(Aq, \*(AqBlowfish\*(Aq, \*(AqCAST5\*(Aq, \*(AqCamellia\*(Aq, \*(AqDES\*(Aq, \*(AqDES_EDE\*(Aq,
\& #                    \*(AqKASUMI\*(Aq, \*(AqKhazad\*(Aq, \*(AqMULTI2\*(Aq, \*(AqNoekeon\*(Aq, \*(AqRC2\*(Aq, \*(AqRC5\*(Aq, \*(AqRC6\*(Aq,
\& #                    \*(AqSAFERP\*(Aq, \*(AqSAFER_K128\*(Aq, \*(AqSAFER_K64\*(Aq, \*(AqSAFER_SK128\*(Aq, \*(AqSAFER_SK64\*(Aq,
\& #                    \*(AqSEED\*(Aq, \*(AqSkipjack\*(Aq, \*(AqTwofish\*(Aq, \*(AqXTEA\*(Aq, \*(AqIDEA\*(Aq, \*(AqSerpent\*(Aq
\& #                    simply any <NAME> for which there exists Crypt::Cipher::<NAME>
\& # $cipher_rounds ... optional num of rounds for given cipher
.Ve
.SS "encrypt"
.IX Subsection "encrypt"
.Vb 1
\&   my $ciphertext = $m\->encrypt($plaintext, $key, $iv);
.Ve
.SS "decrypt"
.IX Subsection "decrypt"
.Vb 1
\&   my $plaintext = $m\->decrypt($ciphertext, $key, $iv);
.Ve
.SS "start_encrypt"
.IX Subsection "start_encrypt"
.Vb 1
\&   $m\->start_encrypt($key, $iv);
.Ve
.SS "start_decrypt"
.IX Subsection "start_decrypt"
.Vb 1
\&   $m\->start_decrypt($key, $iv);
.Ve
.SS "add"
.IX Subsection "add"
.Vb 2
\&   # in encrypt mode
\&   my $plaintext = $m\->add($ciphertext);
\&
\&   # in decrypt mode
\&   my $ciphertext = $m\->add($plaintext);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
CryptX, Crypt::Cipher
.IP "\(bu" 4
Crypt::Cipher::AES, Crypt::Cipher::Blowfish, ...
.IP "\(bu" 4
<https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_feedback_.28CFB.29>
