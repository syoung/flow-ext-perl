.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Real 3"
.TH Real 3 "2007-02-03" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
FindBin::Real \- Locate directory of original perl script
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use FindBin::Real;
\& use lib FindBin::Real::Bin() . \*(Aq/../lib\*(Aq;
\&
\& or
\&
\& use FindBin::Real qw(Bin);
\& use lib Bin() . \*(Aq/../lib\*(Aq;
\&
\& or
\&
\& # Run from /usr/bin/www/some/path/ or /usr/bin/www/some/other/path or any
\& use FindBin::Real qw(BinDepth);
\& use lib BinDepth(3) . \*(Aq/lib\*(Aq;
\& # And always got /usr/bin/www/lib !
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Locates the full path to the script bin directory to allow the use
of paths relative to the bin directory.
.PP
This allows a user to setup a directory tree for some software with
directories <root>/bin and <root>/lib and then the above example will allow
the use of modules in the lib directory without knowing where the software
tree is installed.
.PP
If perl is invoked using the \fB\-e\fR option or the perl script is read from
\&\f(CW\*(C`STDIN\*(C'\fR then FindBin sets both \f(CW\*(C`Bin()\*(C'\fR and \f(CW\*(C`RealBin()\*(C'\fR return values to the current
directory.
.SH "EXPORTABLE FUNCTIONS"
.IX Header "EXPORTABLE FUNCTIONS"
.SS "Bin"
.IX Subsection "Bin"
\&\- path to bin directory from where script was invoked
.SS "Script"
.IX Subsection "Script"
\&\- basename of script from which perl was invoked
.SS "RealBin"
.IX Subsection "RealBin"
\&\- \fBBin()\fR with all links resolved
.SS "RealScript"
.IX Subsection "RealScript"
\&\- \fBScript()\fR with all links resolved
.SS "BinDepth(n)"
.IX Subsection "BinDepth(n)"
\&\- path to n\-level parent directory
.SS "\fBDir()\fP"
.IX Subsection "Dir()"
\&\- the same as \fBBin()\fR
.SS "\fBRealDir()\fP"
.IX Subsection "RealDir()"
\&\- the same as \fBRealBin()\fR
.SH "KNOWN ISSUES"
.IX Header "KNOWN ISSUES"
If there are two modules using \f(CW\*(C`FindBin::Real\*(C'\fR from different directories
under the same interpreter, this \s-1WOULD\s0 work. Since \f(CW\*(C`FindBin::Real\*(C'\fR uses
functions instead of \f(CW\*(C`BEGIN\*(C'\fR block in \f(CW\*(C`FindBin\*(C'\fR, it'll be executed on every script,
and all callers will get it right. This module can be used under mod_perl and other persistent
Perl environments, where you shouldn't use \f(CW\*(C`FindBin\*(C'\fR.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
If perl is invoked as
.PP
.Vb 1
\&   perl filename
.Ve
.PP
and \fIfilename\fR does not have executable rights and a program called \fIfilename\fR
exists in the users \f(CW$ENV{PATH}\fR which satisfies both \fB\-x\fR and \fB\-T\fR then FindBin
assumes that it was invoked via the \f(CW$ENV{PATH}\fR.
.PP
Workaround is to invoke perl as
.PP
.Vb 1
\& perl ./filename
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Serguei Trouchelle <\fIstro@railways.dp.ua\fR>
.PP
FindBin::Real uses code from FindBin module, which was written by
.PP
Graham Barr <\fIgbarr@pobox.com\fR>
Nick Ing-Simmons <\fInik@tiuk.ti.com\fR>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1995 Graham Barr & Nick Ing-Simmons. All rights reserved.
Copyright (c) 2003\-2005 Serguei Trouchelle. All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
