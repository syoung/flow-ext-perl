.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::Digest::SHA512_256 3"
.TH Crypt::Digest::SHA512_256 3 "2020-03-10" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::Digest::SHA512_256 \- Hash function SHA\-512/256 [size: 256 bits]
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   ### Functional interface:
\&   use Crypt::Digest::SHA512_256 qw( sha512_256 sha512_256_hex sha512_256_b64 sha512_256_b64u
\&                                sha512_256_file sha512_256_file_hex sha512_256_file_b64 sha512_256_file_b64u );
\&
\&   # calculate digest from string/buffer
\&   $sha512_256_raw  = sha512_256(\*(Aqdata string\*(Aq);
\&   $sha512_256_hex  = sha512_256_hex(\*(Aqdata string\*(Aq);
\&   $sha512_256_b64  = sha512_256_b64(\*(Aqdata string\*(Aq);
\&   $sha512_256_b64u = sha512_256_b64u(\*(Aqdata string\*(Aq);
\&   # calculate digest from file
\&   $sha512_256_raw  = sha512_256_file(\*(Aqfilename.dat\*(Aq);
\&   $sha512_256_hex  = sha512_256_file_hex(\*(Aqfilename.dat\*(Aq);
\&   $sha512_256_b64  = sha512_256_file_b64(\*(Aqfilename.dat\*(Aq);
\&   $sha512_256_b64u = sha512_256_file_b64u(\*(Aqfilename.dat\*(Aq);
\&   # calculate digest from filehandle
\&   $sha512_256_raw  = sha512_256_file(*FILEHANDLE);
\&   $sha512_256_hex  = sha512_256_file_hex(*FILEHANDLE);
\&   $sha512_256_b64  = sha512_256_file_b64(*FILEHANDLE);
\&   $sha512_256_b64u = sha512_256_file_b64u(*FILEHANDLE);
\&
\&   ### OO interface:
\&   use Crypt::Digest::SHA512_256;
\&
\&   $d = Crypt::Digest::SHA512_256\->new;
\&   $d\->add(\*(Aqany data\*(Aq);
\&   $d\->addfile(\*(Aqfilename.dat\*(Aq);
\&   $d\->addfile(*FILEHANDLE);
\&   $result_raw  = $d\->digest;     # raw bytes
\&   $result_hex  = $d\->hexdigest;  # hexadecimal form
\&   $result_b64  = $d\->b64digest;  # Base64 form
\&   $result_b64u = $d\->b64udigest; # Base64 URL Safe form
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides an interface to the \s-1SHA512_256\s0 digest algorithm.
.SH "EXPORT"
.IX Header "EXPORT"
Nothing is exported by default.
.PP
You can export selected functions:
.PP
.Vb 2
\&  use Crypt::Digest::SHA512_256 qw(sha512_256 sha512_256_hex sha512_256_b64 sha512_256_b64u
\&                                      sha512_256_file sha512_256_file_hex sha512_256_file_b64 sha512_256_file_b64u);
.Ve
.PP
Or all of them at once:
.PP
.Vb 1
\&  use Crypt::Digest::SHA512_256 \*(Aq:all\*(Aq;
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "sha512_256"
.IX Subsection "sha512_256"
Logically joins all arguments into a single string, and returns its \s-1SHA512_256\s0 digest encoded as a binary string.
.PP
.Vb 3
\& $sha512_256_raw = sha512_256(\*(Aqdata string\*(Aq);
\& #or
\& $sha512_256_raw = sha512_256(\*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS "sha512_256_hex"
.IX Subsection "sha512_256_hex"
Logically joins all arguments into a single string, and returns its \s-1SHA512_256\s0 digest encoded as a hexadecimal string.
.PP
.Vb 3
\& $sha512_256_hex = sha512_256_hex(\*(Aqdata string\*(Aq);
\& #or
\& $sha512_256_hex = sha512_256_hex(\*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS "sha512_256_b64"
.IX Subsection "sha512_256_b64"
Logically joins all arguments into a single string, and returns its \s-1SHA512_256\s0 digest encoded as a Base64 string, \fBwith\fR trailing '=' padding.
.PP
.Vb 3
\& $sha512_256_b64 = sha512_256_b64(\*(Aqdata string\*(Aq);
\& #or
\& $sha512_256_b64 = sha512_256_b64(\*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS "sha512_256_b64u"
.IX Subsection "sha512_256_b64u"
Logically joins all arguments into a single string, and returns its \s-1SHA512_256\s0 digest encoded as a Base64 \s-1URL\s0 Safe string (see \s-1RFC 4648\s0 section 5).
.PP
.Vb 3
\& $sha512_256_b64url = sha512_256_b64u(\*(Aqdata string\*(Aq);
\& #or
\& $sha512_256_b64url = sha512_256_b64u(\*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS "sha512_256_file"
.IX Subsection "sha512_256_file"
Reads file (defined by filename or filehandle) content, and returns its \s-1SHA512_256\s0 digest encoded as a binary string.
.PP
.Vb 3
\& $sha512_256_raw = sha512_256_file(\*(Aqfilename.dat\*(Aq);
\& #or
\& $sha512_256_raw = sha512_256_file(*FILEHANDLE);
.Ve
.SS "sha512_256_file_hex"
.IX Subsection "sha512_256_file_hex"
Reads file (defined by filename or filehandle) content, and returns its \s-1SHA512_256\s0 digest encoded as a hexadecimal string.
.PP
.Vb 3
\& $sha512_256_hex = sha512_256_file_hex(\*(Aqfilename.dat\*(Aq);
\& #or
\& $sha512_256_hex = sha512_256_file_hex(*FILEHANDLE);
.Ve
.PP
\&\fB\s-1BEWARE:\s0\fR You have to make sure that the filehandle is in binary mode before you pass it as argument to the \fBaddfile()\fR method.
.SS "sha512_256_file_b64"
.IX Subsection "sha512_256_file_b64"
Reads file (defined by filename or filehandle) content, and returns its \s-1SHA512_256\s0 digest encoded as a Base64 string, \fBwith\fR trailing '=' padding.
.PP
.Vb 3
\& $sha512_256_b64 = sha512_256_file_b64(\*(Aqfilename.dat\*(Aq);
\& #or
\& $sha512_256_b64 = sha512_256_file_b64(*FILEHANDLE);
.Ve
.SS "sha512_256_file_b64u"
.IX Subsection "sha512_256_file_b64u"
Reads file (defined by filename or filehandle) content, and returns its \s-1SHA512_256\s0 digest encoded as a Base64 \s-1URL\s0 Safe string (see \s-1RFC 4648\s0 section 5).
.PP
.Vb 3
\& $sha512_256_b64url = sha512_256_file_b64u(\*(Aqfilename.dat\*(Aq);
\& #or
\& $sha512_256_b64url = sha512_256_file_b64u(*FILEHANDLE);
.Ve
.SH "METHODS"
.IX Header "METHODS"
The \s-1OO\s0 interface provides the same set of functions as Crypt::Digest.
.SS "new"
.IX Subsection "new"
.Vb 1
\& $d = Crypt::Digest::SHA512_256\->new();
.Ve
.SS "clone"
.IX Subsection "clone"
.Vb 1
\& $d\->clone();
.Ve
.SS "reset"
.IX Subsection "reset"
.Vb 1
\& $d\->reset();
.Ve
.SS "add"
.IX Subsection "add"
.Vb 3
\& $d\->add(\*(Aqany data\*(Aq);
\& #or
\& $d\->add(\*(Aqany data\*(Aq, \*(Aqmore data\*(Aq, \*(Aqeven more data\*(Aq);
.Ve
.SS "addfile"
.IX Subsection "addfile"
.Vb 3
\& $d\->addfile(\*(Aqfilename.dat\*(Aq);
\& #or
\& $d\->addfile(*FILEHANDLE);
.Ve
.SS "add_bits"
.IX Subsection "add_bits"
.Vb 3
\& $d\->add_bits($bit_string);   # e.g. $d\->add_bits("111100001010");
\& #or
\& $d\->add_bits($data, $nbits); # e.g. $d\->add_bits("\exF0\exA0", 16);
.Ve
.SS "hashsize"
.IX Subsection "hashsize"
.Vb 5
\& $d\->hashsize;
\& #or
\& Crypt::Digest::SHA512_256\->hashsize();
\& #or
\& Crypt::Digest::SHA512_256::hashsize();
.Ve
.SS "digest"
.IX Subsection "digest"
.Vb 1
\& $result_raw = $d\->digest();
.Ve
.SS "hexdigest"
.IX Subsection "hexdigest"
.Vb 1
\& $result_hex = $d\->hexdigest();
.Ve
.SS "b64digest"
.IX Subsection "b64digest"
.Vb 1
\& $result_b64 = $d\->b64digest();
.Ve
.SS "b64udigest"
.IX Subsection "b64udigest"
.Vb 1
\& $result_b64url = $d\->b64udigest();
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
CryptX, Crypt::Digest
.IP "\(bu" 4
<https://en.wikipedia.org/wiki/SHA\-2>
