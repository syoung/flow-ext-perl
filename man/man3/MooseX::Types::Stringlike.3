.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MooseX::Types::Stringlike 3"
.TH MooseX::Types::Stringlike 3 "2014-04-17" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Types::Stringlike \- Moose type constraints for strings or string\-like objects
.SH "VERSION"
.IX Header "VERSION"
version 0.003
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  package Foo;
\&  use Moose;
\&  use MooseX::Types::Stringlike qw/Stringlike Stringable ArrayRefOfStringlike ArrayRefOfStringable/;
\&
\&  has path => (
\&    is => \*(Aqro\*(Aq,
\&    isa => Stringlike,
\&    coerce => 1
\&  );
\&
\&  has stringable_object => (
\&    is => \*(Aqro\*(Aq,
\&    isa => Stringable,
\&  );
\&
\&  has paths => (
\&    is => \*(Aqro\*(Aq,
\&    isa => ArrayRefOfStringlike,
\&    coerce => 1
\&  );
\&
\&  has stringable_objects => (
\&    is => \*(Aqro\*(Aq,
\&    isa => ArrayRefOfStringable,
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a more general version of the \f(CW\*(C`Str\*(C'\fR type.  If coercions
are enabled, it will accepts objects that overload stringification and coerces
them into strings.
.SH "SUBTYPES"
.IX Header "SUBTYPES"
This module uses MooseX::Types to define the following subtypes.
.SS "Stringlike"
.IX Subsection "Stringlike"
\&\f(CW\*(C`Stringlike\*(C'\fR is a subtype of \f(CW\*(C`Str\*(C'\fR.  It can coerce \f(CW\*(C`Stringable\*(C'\fR objects into
a string.
.SS "Stringable"
.IX Subsection "Stringable"
\&\f(CW\*(C`Stringable\*(C'\fR is a subtype of \f(CW\*(C`Object\*(C'\fR where the object has overloaded stringification.
.SS "ArrayRefOfStringlike"
.IX Subsection "ArrayRefOfStringlike"
\&\f(CW\*(C`ArrayRefStringlike\*(C'\fR is a subtype of \f(CW\*(C`ArrayRef[Str]\*(C'\fR.  It can coerce \f(CW\*(C`ArrayRefOfStringable\*(C'\fR objects into
an arrayref of strings.
.SS "ArrayRefOfStringable"
.IX Subsection "ArrayRefOfStringable"
\&\f(CW\*(C`ArrayRefOfStringable\*(C'\fR is a subtype of \f(CW\*(C`ArrayRef[Object]\*(C'\fR where the objects have overloaded stringification.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Moose::Manual::Types
.IP "\(bu" 4
MooseX::Types
.IP "\(bu" 4
MooseX::Types::Moose
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
Thank you to Dagfinn Ilmari Manns√•ker for the idea on \s-1IRC\s0 that led to this module.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker
at <https://github.com/dagolden/MooseX\-Types\-Stringlike/issues>.
You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software.  The code repository is available for
public review and contribution under the terms of the license.
.PP
<https://github.com/dagolden/MooseX\-Types\-Stringlike>
.PP
.Vb 1
\&  git clone https://github.com/dagolden/MooseX\-Types\-Stringlike.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
David Golden <dagolden@cpan.org>
.SH "CONTRIBUTOR"
.IX Header "CONTRIBUTOR"
Karen Etheridge <ether@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2012 by David Golden.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
