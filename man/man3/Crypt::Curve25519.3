.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::Curve25519 3"
.TH Crypt::Curve25519 3 "2017-04-05" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::Curve25519 \- Generate shared secret using elliptic\-curve Diffie\-Hellman function
.SH "VERSION"
.IX Header "VERSION"
version 0.06
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Crypt::Curve25519;
\&
\&    # Alice:
\&    my $alice_secret_key = curve25519_secret_key(random_32_bytes());
\&    my $alice_public_key = curve25519_public_key( $alice_secret_key );
\&
\&    # Bob:
\&    my $bob_secret_key = curve25519_secret_key(random_32_bytes());
\&    my $bob_public_key = curve25519_public_key( $bob_secret_key );
\&
\&    # Alice and Bob exchange their public keys
\&    my $alice_public_key_hex = unpack(\*(AqH64\*(Aq, $alice_public_key);
\&    my $bob_public_key_hex   = unpack(\*(AqH64\*(Aq, $bob_public_key);
\&
\&    # Alice calculates shared secret to communicate with Bob
\&    my $shared_secret_with_bob = curve25519_shared_secret(
\&        $alice_secret_key,
\&        pack(\*(AqH64\*(Aq, $bob_public_key_hex)
\&    );
\&
\&    # Bob calculates shared secret to communicate with Alice
\&    my $shared_secret_with_alice = curve25519_shared_secret(
\&        $bob_secret_key,
\&        pack(\*(AqH64\*(Aq, $alice_public_key_hex)
\&    );
\&
\&    # Shared secrets are equal
\&    die "Something horrible has happend!"
\&      unless $shared_secret_with_bob eq $shared_secret_with_alice;
.Ve
.PP
This package provides also simplified \s-1OO\s0 interface:
.PP
.Vb 1
\&    use Crypt::Curve25519 ();
\&
\&    my $c = Crypt::Curve25519\->new();
\&
\&    # Alice:
\&    my $alice_secret_key_hex = $c\->secret_key(random_hexencoded_32_bytes());
\&    my $alice_public_key_hex = $c\->public_key( $alice_secret_key_hex );
\&
\&    # Bob:
\&    my $bob_secret_key_hex = $c\->secret_key(random_hexencoded_32_bytes());
\&    my $bob_public_key_hex = $c\->public_key( $bob_secret_key_hex );
\&
\&    # Alice and Bob exchange their public keys
\&
\&    # Alice calculates shared secret to communicate with Bob
\&    my $shared_secret_with_bob_hex = $c\->shared_secret(
\&                                    $alice_secret_key_hex,
\&                                    $bob_public_key_hex);
\&
\&    # Bob calculates shared secret to communicate with Alice
\&    my $shared_secret_with_alice_hex = $c\->shared_secret(
\&                                    $bob_secret_key_hex,
\&                                    $alice_public_key_hex);
\&
\&    # Shared secrets are equal
\&    die "Something horrible has happend!"
\&      unless $shared_secret_with_bob_hex eq $shared_secret_with_alice_hex;
.Ve
.PP
Example functions to generate pseudo-random private secret key:
.PP
.Vb 3
\&    sub random_32_bytes {
\&        return join(\*(Aq\*(Aq, map { chr(int(rand(255))) } 1 .. 32);
\&    }
\&
\&    sub random_hexencoded_32_bytes {
\&       return unpack(\*(AqH64\*(Aq, random_32_bytes());
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Curve25519 is a state-of-the-art Diffie-Hellman function suitable for a wide
variety of applications.
.PP
Given a user's 32\-byte secret key, Curve25519 computes the user's 32\-byte
public key. Given the user's 32\-byte secret key and another user's 32\-byte
public key, Curve25519 computes a 32\-byte secret shared by the two users. This
secret can then be used to authenticate and encrypt messages between the two
users.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    my $c = Crypt::Curve25519\->new();
.Ve
.PP
Create a new object
.SS "secret_key"
.IX Subsection "secret_key"
.Vb 1
\&    my $my_secret_key_hex = $c\->secret_key( $my_random_32byte_string_hex );
.Ve
.PP
Using hex encoded 32\-byte random string from cryptographically safe source
create masked secret key.
.SS "public_key"
.IX Subsection "public_key"
.Vb 1
\&    my $public_key_hex = $c\->public_key( $my_secret_key_hex );
.Ve
.PP
Using hex encoded masked secret key generate corresponding hex encoded 32\-byte
Curve25519 public key.
.SS "shared_secret"
.IX Subsection "shared_secret"
.Vb 3
\&    my $shared_secret_hex = $c\->shared_secret(
\&        $my_secret_key_hex, $his_public_key_hex
\&    );
.Ve
.PP
Using provided hex encoded keys generate 32\-byte hex encoded shared secret,
that both parties can use without disclosing their private secret keys.
.SS "generate"
.IX Subsection "generate"
Access to primitive method is also provided.
.PP
.Vb 1
\&    my $key_hex = $c\->generate($my_secret_key_hex, $basepoint_hex);
\&
\&    # public key
\&    if ( $basepoint_hex eq unpack("H64", pack("H64", "09")) ) {
\&        print "\e$key_hex is a public key\en";
\&    }
\&    elsif ( $basepoint_hex eq $his_public_key_hex ) {
\&        print "\e$key_hex is a shared secret\en";
\&    }
.Ve
.PP
Using provided hex encoded secret key and depending on the 32\-byte hex
encoded basepoint generate 32\-byte hex encoded public key or shared secret.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "curve25519_secret_key"
.IX Subsection "curve25519_secret_key"
.Vb 1
\&    my $my_secret_key = curve25519_secret_key($my_random_32byte_string);
.Ve
.PP
Using provided 32\-byte random string from cryptographically safe source create
masked secret key.
.SS "curve25519_public_key"
.IX Subsection "curve25519_public_key"
.Vb 1
\&    my $public_key = curve25519_public_key($my_secret_key);
.Ve
.PP
Using masked secret key generate corresponding 32\-byte Curve25519 public key.
.SS "curve25519_shared_secret"
.IX Subsection "curve25519_shared_secret"
.Vb 3
\&    my $shared_secret = curve25519_shared_secret(
\&        $my_secret_key, $his_public_key
\&    );
.Ve
.PP
Using provided keys generate 32\-byte shared secret, that both parties can use
without disclosing their private secret keys.
.SS "curve25519"
.IX Subsection "curve25519"
Access to primitive function is also provided.
.PP
.Vb 1
\&    use Crypt::Curve25519 \*(Aqcurve25519\*(Aq;
\&
\&    my $key = curve25519($my_secret_key, $basepoint);
\&
\&    # public key
\&    if ( $basepoint eq pack(\*(AqH64\*(Aq, \*(Aq09\*(Aq) ) {
\&        print "\e$key is a public key\en";
\&    }
\&    elsif ( $basepoint eq $his_public_key ) {
\&        print "\e$key is a shared secret\en";
\&    }
.Ve
.PP
Using provided secret key and depending on the 32\-byte basepoint generate
32\-byte public key or shared secret.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
<http://cr.yp.to/ecdh.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Alex J. G. Burzyński <ajgb@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2014 by Alex J. G. Burzyński <ajgb@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
