.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IDEA 3"
.TH IDEA 3 "2005-12-08" "perl v5.26.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IDEA \- Perl interface to IDEA block cipher
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Crypt::IDEA;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This perl extension is an implementation of the \s-1IDEA\s0 block cipher algorithm.
The module implements the Crypt::BlockCipher interface,
which has the following methods
.IP "blocksize =item keysize =item encrypt =item decrypt" 4
.IX Item "blocksize =item keysize =item encrypt =item decrypt"
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.PD 0
.IP "blocksize" 4
.IX Item "blocksize"
.PD
Returns the size (in bytes) of the block cipher.
.IP "keysize" 4
.IX Item "keysize"
Returns the size (in bytes) of the key.
.IP "new" 4
.IX Item "new"
.Vb 1
\&        my $cipher = new IDEA $key;
.Ve
.Sp
This creates a new \s-1IDEA\s0 BlockCipher object, using \f(CW$key\fR,
where \f(CW$key\fR is a key of \f(CW\*(C`keysize()\*(C'\fR bytes.
.IP "encrypt" 4
.IX Item "encrypt"
.Vb 2
\&        my $cipher = new IDEA $key;
\&        my $ciphertext = $cipher\->encrypt($plaintext);
.Ve
.Sp
This function encrypts \f(CW$plaintext\fR and returns the \f(CW$ciphertext\fR
where \f(CW$plaintext\fR and \f(CW$ciphertext\fR should be of \f(CW\*(C`blocksize()\*(C'\fR bytes.
.IP "decrypt" 4
.IX Item "decrypt"
.Vb 2
\&        my $cipher = new IDEA $key;
\&        my $plaintext = $cipher\->decrypt($ciphertext);
.Ve
.Sp
This function decrypts \f(CW$ciphertext\fR and returns the \f(CW$plaintext\fR
where \f(CW$plaintext\fR and \f(CW$ciphertext\fR should be of \f(CW\*(C`blocksize()\*(C'\fR bytes.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 4
\&        my $key = pack("H32", "0123456789ABCDEF0123456789ABCDEF");
\&        my $cipher = new IDEA $key;
\&        my $ciphertext = $cipher\->encrypt("plaintex");  # NB \- 8 bytes
\&        print unpack("H16", $ciphertext), "\en";
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Crypt::CBD, Crypt::DES, Crypt::Blowfish
.PP
Bruce Schneier, \fIApplied Cryptography\fR, 1995, Second Edition,
published by John Wiley & Sons, Inc.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This implementation is copyright Systemics Ltd ( http://www.systemics.com/ ).
.PP
The \s-1IDEA\s0 algorithm is patented in Europe and the United States
by Ascom-Tech \s-1AG.\s0
.PP
Module altered between 1999 and 2005  to allow added functionality with perl \-MCPAN,
Changes by Dave Paris  (edited lib paths, endian issues, new tests).
.PP
Thank you to contributors for endian patches and new test suite!
